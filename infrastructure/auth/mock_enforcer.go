// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthEnforcer creates a new instance of MockAuthEnforcer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthEnforcer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthEnforcer {
	mock := &MockAuthEnforcer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthEnforcer is an autogenerated mock type for the AuthEnforcer type
type MockAuthEnforcer struct {
	mock.Mock
}

type MockAuthEnforcer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthEnforcer) EXPECT() *MockAuthEnforcer_Expecter {
	return &MockAuthEnforcer_Expecter{mock: &_m.Mock}
}

// AddPolicy provides a mock function for the type MockAuthEnforcer
func (_mock *MockAuthEnforcer) AddPolicy(sub string, obj AuthObject, act AuthAction) error {
	ret := _mock.Called(sub, obj, act)

	if len(ret) == 0 {
		panic("no return value specified for AddPolicy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, AuthObject, AuthAction) error); ok {
		r0 = returnFunc(sub, obj, act)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthEnforcer_AddPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPolicy'
type MockAuthEnforcer_AddPolicy_Call struct {
	*mock.Call
}

// AddPolicy is a helper method to define mock.On call
//   - sub
//   - obj
//   - act
func (_e *MockAuthEnforcer_Expecter) AddPolicy(sub interface{}, obj interface{}, act interface{}) *MockAuthEnforcer_AddPolicy_Call {
	return &MockAuthEnforcer_AddPolicy_Call{Call: _e.mock.On("AddPolicy", sub, obj, act)}
}

func (_c *MockAuthEnforcer_AddPolicy_Call) Run(run func(sub string, obj AuthObject, act AuthAction)) *MockAuthEnforcer_AddPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(AuthObject), args[2].(AuthAction))
	})
	return _c
}

func (_c *MockAuthEnforcer_AddPolicy_Call) Return(err error) *MockAuthEnforcer_AddPolicy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthEnforcer_AddPolicy_Call) RunAndReturn(run func(sub string, obj AuthObject, act AuthAction) error) *MockAuthEnforcer_AddPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// Enforce provides a mock function for the type MockAuthEnforcer
func (_mock *MockAuthEnforcer) Enforce(sub string, obj AuthObject, act AuthAction) (bool, error) {
	ret := _mock.Called(sub, obj, act)

	if len(ret) == 0 {
		panic("no return value specified for Enforce")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, AuthObject, AuthAction) (bool, error)); ok {
		return returnFunc(sub, obj, act)
	}
	if returnFunc, ok := ret.Get(0).(func(string, AuthObject, AuthAction) bool); ok {
		r0 = returnFunc(sub, obj, act)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, AuthObject, AuthAction) error); ok {
		r1 = returnFunc(sub, obj, act)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthEnforcer_Enforce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enforce'
type MockAuthEnforcer_Enforce_Call struct {
	*mock.Call
}

// Enforce is a helper method to define mock.On call
//   - sub
//   - obj
//   - act
func (_e *MockAuthEnforcer_Expecter) Enforce(sub interface{}, obj interface{}, act interface{}) *MockAuthEnforcer_Enforce_Call {
	return &MockAuthEnforcer_Enforce_Call{Call: _e.mock.On("Enforce", sub, obj, act)}
}

func (_c *MockAuthEnforcer_Enforce_Call) Run(run func(sub string, obj AuthObject, act AuthAction)) *MockAuthEnforcer_Enforce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(AuthObject), args[2].(AuthAction))
	})
	return _c
}

func (_c *MockAuthEnforcer_Enforce_Call) Return(b bool, err error) *MockAuthEnforcer_Enforce_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAuthEnforcer_Enforce_Call) RunAndReturn(run func(sub string, obj AuthObject, act AuthAction) (bool, error)) *MockAuthEnforcer_Enforce_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePolicy provides a mock function for the type MockAuthEnforcer
func (_mock *MockAuthEnforcer) RemovePolicy(sub string, obj AuthObject, act AuthAction) error {
	ret := _mock.Called(sub, obj, act)

	if len(ret) == 0 {
		panic("no return value specified for RemovePolicy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, AuthObject, AuthAction) error); ok {
		r0 = returnFunc(sub, obj, act)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthEnforcer_RemovePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePolicy'
type MockAuthEnforcer_RemovePolicy_Call struct {
	*mock.Call
}

// RemovePolicy is a helper method to define mock.On call
//   - sub
//   - obj
//   - act
func (_e *MockAuthEnforcer_Expecter) RemovePolicy(sub interface{}, obj interface{}, act interface{}) *MockAuthEnforcer_RemovePolicy_Call {
	return &MockAuthEnforcer_RemovePolicy_Call{Call: _e.mock.On("RemovePolicy", sub, obj, act)}
}

func (_c *MockAuthEnforcer_RemovePolicy_Call) Run(run func(sub string, obj AuthObject, act AuthAction)) *MockAuthEnforcer_RemovePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(AuthObject), args[2].(AuthAction))
	})
	return _c
}

func (_c *MockAuthEnforcer_RemovePolicy_Call) Return(err error) *MockAuthEnforcer_RemovePolicy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthEnforcer_RemovePolicy_Call) RunAndReturn(run func(sub string, obj AuthObject, act AuthAction) error) *MockAuthEnforcer_RemovePolicy_Call {
	_c.Call.Return(run)
	return _c
}
